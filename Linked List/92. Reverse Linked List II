/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(head->next==NULL || left==right){
            return head;
        }
        struct ListNode* dummy= new ListNode(-1);
        dummy->next=head;
        struct ListNode* prevle=dummy;
        struct ListNode* currle=dummy->next;
        struct ListNode* currri=dummy;
        struct ListNode* rinext=dummy->next;
        for(int i=0;i<left-1;i++){
            prevle=prevle->next;
        }
        struct ListNode* temp=prevle;
        currle=prevle->next;
        for(int i=0;i<right;i++){
            currri=currri->next;
        }
        rinext=currri->next;
        struct ListNode* lenext=currle->next;
        currle->next=rinext;
        prevle=currle;
        currle=lenext;
        while(currle!=rinext){
            lenext=currle->next;
            currle->next=prevle;
            prevle=currle;
            currle=lenext;
        }
        temp->next=currri;
        return dummy->next;
    }
};


//Input: head = [1,2,3,4,5], left = 2, right = 4
//Output: [1,4,3,2,5]
