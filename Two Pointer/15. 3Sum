class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>>ans;
        for(int i=0;i<n-2;i++){
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            int left=i+1;
            int right=n-1;
            while(left<right){
                int sum=nums[i]+nums[left]+nums[right];
                if(sum==0){
                    ans.push_back({nums[i],nums[left],nums[right]});
                    while(left < right && nums[left] == nums[left + 1]) left++;
                    while(left < right && nums[right] == nums[right - 1]) right--;
                    //nums =[-2,0,0,2,2]
                    //ignore the same left and right value 
                    left++;
                    right--;
                }
                else if(sum>0){
                    right--;
                }
                else {
                    left++;
                }
            }

        }
        return ans;


        // set<vector<int>>uniqueSet;
        // vector<vector<int>>ans;
        // for(auto v:unique){
        //     sort(v.begin(),v.end());
        //     if(uniqueSet.find(v)==uniqueSet.end()){
        //         uniqueSet.insert(v);
        //         ans.push_back(v);
        //     }
        // }
        //[[-1,-1,2],[-1,-1,2],[-1,0,1]] remove repeated element(all combination also)
        
    }
};
